#include <cstdio>
#include <memory.h>
unsigned int rhs[] = {4, 2, 6, 2, 4, 8, 6, 0, 9, 9, 9, 8, 5, 2, 1, 1};
unsigned int lhs[] = {4, 2, 6, 2, 4, 8, 6, 0, 9, 9, 9, 8, 5, 2, 1, 1};

void Multiply(unsigned int* lhs, size_t lhs_cnt, unsigned int*rhs, size_t rhs_cnt, unsigned int*answer)
{
	for (size_t i = 0; i < lhs_cnt; ++i)
	{
		for (size_t j = 0; j < rhs_cnt; ++j)
		{
			printf("%lu %lu (%u*%u)-", i, j, rhs[j], lhs[i]);
			unsigned int tmp = rhs[j] * lhs[i];
			answer[i + j] += tmp % 10;
			answer[i + j + 1] += tmp / 10;
			for (ssize_t k = lhs_cnt + rhs_cnt - 1; k >= 0; --k)
			{
				printf("%u ", answer[k]);
			}
			printf("\n");
		}
	}

	for (size_t i = 0; i < lhs_cnt + rhs_cnt - 1; ++i)
	{
		unsigned int tmp = answer[i];
		printf("tmp: %d\n", tmp);
		if (answer[i] >= 10)
		{
			answer[i] = tmp % 10;
			answer[i + 1] += tmp / 10;
		}
	}
}
int main(int argc, char* argv[])
{
	ssize_t lhs_cnt = sizeof(lhs) / sizeof(lhs[0]);
	ssize_t rhs_cnt = sizeof(rhs) / sizeof(rhs[0]);
	unsigned int* answer = new unsigned int[lhs_cnt + rhs_cnt];
	for (size_t i = 0; i < lhs_cnt + rhs_cnt; ++i)
	{
		answer[i] = 0;
	}
	Multiply(lhs, lhs_cnt, rhs, rhs_cnt, answer);

	bool valid = false;
	for (ssize_t i = lhs_cnt + rhs_cnt - 1; i >= 0; --i)
	{
		if (!valid)
		{
			if (answer[i] != 0)
				valid = true;
		}

		if (valid)
			printf("%u", answer[i]);
	}
	printf("\n");
	delete [] answer;
	return 0;
}
